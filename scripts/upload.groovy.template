@GrabConfig(systemClassLoader=true)
@Grapes([
@Grab(group='ant', module='ant', version='1.7.0'),
@Grab(group='ant', module='ant-nodeps', version='1.6.5'),
@Grab(group='ant', module='ant-apache-oro', version='1.6.5'),
@Grab(group='ant', module='optional', version='1.5.4'),
@Grab(group='commons-net', module='commons-net', version='1.4.1'),
@Grab(group='commons-io', module='commons-io', version='2.4'),
@Grab(group='ant', module='ant-jakarta-oro', version='1.6.1'),
@Grab(group='ant', module='ant-commons-net', version='1.6.5')
])


import org.apache.commons.net.ftp.FTPClient
import org.apache.commons.io.*
import groovy.io.FileType
import java.security.MessageDigest
import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

ftp_host="xxx"
ftp_user="xxx"
ftp_pass="xxx"
ftp_dir='xxx'

scriptDir = new File(getClass().protectionDomain.codeSource.location.path).parent
checksumFile = new File(scriptDir, "../tmp/gchecksum.json")
base_dir = new File(scriptDir, "../output")
println base_dir

def main(){
	def currentHash = generateHash()
	if(!checksumFile.exists()){
		upload(currentHash, [:])
		writeChecksum(currentHash)
		return
	}
	println 'Comparing...'
	println 'Reading previous hash...'
	def preHash = readHash()
	def diff = mapDiff(preHash, currentHash)
	println 'Removed'
	println diff.removed
	println 'Changed'
	def changed = [:]
	changed.putAll(diff.added)
	changed.putAll(diff.changed)
	println changed
	upload(changed, diff.removed)
	writeChecksum(currentHash)
}

def generateHash(){
	println 'Generating current hash...'
	Map hashes = [:]
	allFiles(base_dir).each{ File file ->
		def md = generateMD5(file)
		hashes[file.path.substring(base_dir.path.length()+1).tr('\\','/')]=md
	}
	println "${hashes.size()} hashes are generate."
	hashes
}

def allFiles(File dir){
	def list = []
	dir.eachFileRecurse (FileType.FILES) { file ->
	  list << file
	}
	list
}

def generateMD5(final file) {
       MessageDigest digest = MessageDigest.getInstance("MD5")
       file.withInputStream(){is->
       byte[] buffer = new byte[8192]
       int read = 0
          while( (read = is.read(buffer)) > 0) {
                 digest.update(buffer, 0, read);
             }
         }
       byte[] md5sum = digest.digest()
       BigInteger bigInt = new BigInteger(1, md5sum)
       return bigInt.toString(16).padLeft(32, '0')
}

def toJson(m){
	builder = new JsonBuilder()
	builder(m)
	builder.toString()
}

def writeChecksum(m){
	checksumFile.text=toJson(m)
}

def readHash(){
	slurper = new JsonSlurper()
	slurper.parseText(checksumFile.text) 
}

def mapDiff(Map oldMap, Map newMap){
	def newKeys = newMap*.key
	def oldKeys = oldMap*.key
	 
	def removedKeys = oldKeys-newKeys
	def addedKeys = newKeys - oldKeys
	def commonKeys =newKeys - removedKeys - addedKeys
	def changedKeys = commonKeys.findAll { oldMap[it] != newMap[it] }
	def unchangedKeys = commonKeys - changedKeys
	 
	def changes = [
	removed: oldMap.findAll { it.key in removedKeys },
	added: newMap.findAll { it.key in addedKeys },
	changed: oldMap.findAll { it.key in changedKeys },
	unchanged: newMap.findAll { it.key in unchangedKeys }
	]
}


def upload(uploadable, deletable){
	def ant = new AntBuilder()
	if(uploadable.size() != 0){
		ant.ftp(server: ftp_host, 
				userid: ftp_user, 
				password: ftp_pass, 
				remotedir: ftp_dir, 
				passive:"yes",
				verbose: "yes",
				binary:"yes",
				action: "put"){
			fileset(dir:base_dir.path){
				uploadable.each{
					include(name:it.key)
				}
			}
		}
	}
	if(deletable.size() == 0){
		return
	}
	ant.ftp(server: ftp_host, 
			userid: ftp_user, 
			password: ftp_pass, 
			remotedir: ftp_dir, 
			passive:"yes",
			verbose: "yes",
			binary:"yes",
			action: "delete"){
		fileset(dir:base_dir.path){
			deletable.each{
				include(name:it.key)
			}
		}
	}
}

main()
