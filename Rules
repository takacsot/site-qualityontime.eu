#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.
preprocess do
  list_hidden_items
  list_non_published
  #items.delete_if { |item| item[:publish] == false }
  items.delete_if { |item| item[:created_at] && attribute_to_time(item[:created_at]) > Time.new}
  create_tag_pages
  # paginate_articles
end

compile '/assets/css/*' do
  # don’t filter or layout
end
compile '/assets/js/*' do
  # don’t filter or layout
end
compile '/htaccess/*' do
  # don’t filter or layout
end
compile '/rss/' do
  filter :erb
end

compile '/page/*/' do
  filter :erb
  layout '/default/'
end

compile '*' do
  if item.binary?
    # don’t filter binary items
  else
	ext = item[:extension].nil? ? nil : item[:extension].split('.').last
	case ext
    when 'md', 'txt'
	  filter :erb
      filter :kramdown
    when 'haml'
      filter :haml
    else
      filter :erb
	end
	lyt = 'default'
	lyt = 'book' if item[:book]
	lyt = item[:layout] if item[:layout]  
	layout lyt
	filter :relativize_paths, :type => :html
  end
end

route '/assets/css/*/' do
  item.identifier.chop + '.css'
end
route '/assets/js/*/' do
  item.identifier.chop + '.js'
end

route '/robots/' do
    item.identifier.chop+'.txt'
end
route '/sitemap/' do
    item.identifier.chop+'.xml'
end
route '/htaccess/' do
  '/.htaccess'
end
route '/rss/' do
  '/rss.xml'
end
route '/google803f4acc65c5566f/' do
  '/google803f4acc65c5566f.html'
end

route '*' do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
	item.identifier + 'index.html'
=begin
	#Instead of index.html you could create meaningfull file names
	case item.identifier
	when '/'
		item.identifier + 'index.html'
	else
		item.identifier.chop + '.html'
	end
=end
  end
end

layout '/pagination_page/', :erb
layout '*', :erb
